version: 2.1
vars:
  setup_remote_docker: &setup_remote_docker
    setup_remote_docker:
      docker_layer_caching: true
      version: 20.10.14
  load_build_image: &load_build_image
    run:
      name: Import build image
      command: docker load -i /tmp/workspace/sv-mosaic-local.tar.gz
workflows:
  build:
    jobs:
      - build:
          context: default
          filters:
            branches:
              only:
                - develop
                - master
                - qa
                - staging
                - /pull.*/
      - publish:
          context: default
          requires:
            - build
          filters:
            branches:
              only:
                - qa
                - staging
                - master
      - storybook:
          context: default
          requires:
            - build
      - unit_tests:
          context: default
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - /pull.*/
      - automation_tests:
          context: default
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - /pull.*/

orbs:
  slack: circleci/slack@4.4.0
jobs:
  build:
    docker:
      - image: cimg/base:2022.09
    steps:
      - checkout
      - *setup_remote_docker
      - run:
          name: Build
          command: |
            docker compose build node_ci
      - add_ssh_keys:
          fingerprints:
            - 90:c4:82:92:d0:82:28:9d:f4:c9:d0:25:27:1e:07:50
      - run:
          name: Add github to known_hosts
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Save to file
          command: |
            mkdir -p /tmp/workspace
            docker save sv-mosaic:local | gzip > /tmp/workspace/sv-mosaic-local.tar.gz
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - .
  publish:
    docker:
      - image: cimg/base:2022.09
    steps:
      - checkout
      - *setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - *load_build_image
      - run:
          name: Publish to NPM
          command: docker compose run --rm node_ci yarn run ci:publish
  storybook:
    docker:
      - image: cimg/base:2022.09
    resource_class: large
    working_directory: /app
    steps:
      # - add_ssh_keys:
      #     fingerprints:
      #       - 90:c4:82:92:d0:82:28:9d:f4:c9:d0:25:27:1e:07:50
      # - run:
      #     name: Add github to known_hosts
      #     command: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - *setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - *load_build_image
      - run:
          name: Publish storybook
          command: docker compose run --rm node_ci yarn run ci:storybook
          environment:
            NODE_DEBUG: gh-pages
  unit_tests:
    docker:
      - image: cimg/base:2022.09
    parallelism: 5
    resource_class: large
    steps:
      - checkout
      - *setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - *load_build_image
      - run:
          name: Unit tests
          command: |
            UNIT_TESTS=$(circleci tests glob "src/**/*.test.*" | circleci tests split --split-by=timings)
            docker compose run --rm node_ci yarn test $UNIT_TESTS
  automation_tests:
    docker:
      - image: cimg/base:2022.09
    # parallelism: 10
    resource_class: large
    steps:
      - checkout
      - *setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - *load_build_image
      - run:
          name: "Setting environment variable"
          command: echo 'export ENV="ci"' >> "$BASH_ENV"
      - run:
          name: Build
          command: docker compose build automation_testing_ci
      - run:
          name: Automation tests
          # command: |
          #   AUTOMATION_TESTS=$(circleci tests glob "automation_testing/**/*.spec.*" | circleci tests split --split-by=timings)
          #   docker compose run --rm automation_testing_ci npm run test:chrome $AUTOMATION_TESTS
          command: ls -la
